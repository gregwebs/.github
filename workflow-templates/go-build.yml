# Build, test, and lint changes
# For Qa, staging, etc, this workflow should be called
# It will then push build artifacts (docker images)
name: Build

on:
  merge_group:
    types: [checks_requested]

  pull_request:

  push:
    branches:
      - 'test-ci/build/*'
      - 'main'

  workflow_call:
    inputs:
      artifacts:
        required: false
        type: boolean
      noNotify:
        required: false
        type: boolean
        default: true
      environment:
        required: false
        type: string
      ref:
        required: false
        type: string

env:
  GO_VERSION: 1.22.0

jobs:
  # Golang checks that can be ran in parallel with the build
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: "${{inputs.ref}}"

      - name: Golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: generate-check
        shell: bash
        run: |
          time go install github.com/dmarkham/enumer@v1.5.9
          go generate ./...
          ./script/ci/check-dirty.sh "go generate"

      - name: gofmt-check
        shell: bash
        run: |
          ./script/ci/go-fmt.sh
          ./script/ci/check-dirty.sh "gofmt -s (simplify)"

      - name: govuln-check
        uses: golang/govulncheck-action@v1.0.1
        with:
          go-version-input: ${{ env.GO_VERSION }}
          go-package: ./...
          cache: false
          repo-checkout: false


  # golangci-lint can take a long time, so run it in its own job
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: "${{inputs.ref}}"

      - name: Golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true # need to load the cache before the generate step

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.7.0
        # only-new-issues isn't working right on deployments
        # however, changes are already getting linted on PRs
        # Also doesn't work on pushes to main
        if: "!inputs.artifacts && !contains(github.ref_name, 'test-ci/build/') && (github.ref != 'refs/heads/main')"
        with:
          skip-pkg-cache: true # setup-go is handling the cache
          skip-build-cache: true # setup-go is handling the cache
          # On CI, this setting is used rather than relying on the golangci-lint yml configuration
          only-new-issues: true
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54.2
          args: --timeout=30m --allow-parallel-runners

  build:
    environment: "${{ inputs.environment }}"

    # Using an expression makes it so there are no validation complaints
    runs-on: "${{'Larger_Runner'}}"

    services:
      postgres:
        image: postgres:14.9
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER: postgres
          POSTGRES_DB: bravo_test
          POSTGRES_DATABASE: bravo_test
        ports:
          - "5432:5432"
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: "${{inputs.ref}}"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set variables for building and pushing artifacts
        if: inputs.artifacts
        shell: bash
        run: |
          echo "inputs: environment=${{inputs.environment}} ref=${{inputs.ref}} artifacts=${{inputs.artifacts}} noNotify=${{inputs.noNotify}}"
          echo "building ${{inputs.ref || github.ref_name}}"
          echo "VERSION=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{vars.ENVIRONMENT}}" >> $GITHUB_ENV

      - name: build and test
        shell: bash
        run: EXTERNAL_POSTGRES=1 ./script/ci/build-test.sh

      # Check that all migrations have been applied
      - name: migrations check
        shell: bash
        run: |
          EXTERNAL_POSTGRES=1 script/ci/check-migrations.sh

      - name: Check status step
        id: check-step
        if: success()
        shell: bash
        run: echo "Workflow successful"

      - name: "Notify slack"
        if: ${{ always() && !inputs.noNotify }}
        shell: bash
        run: |
          FAILURE=${{ steps.check-step.outcome != 'success' && 'true' || '' }} \
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }} \
          ./script/ci/slack-notification.sh built ${{ env.ENVIRONMENT }} ${{ inputs.artifacts && 'and pushed' || ''}}
